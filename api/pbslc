#!/usr/bin/env python

# TODO
# mangle scattering and emission parameter names so they don't conflict
# during compilation OR just make both sets of names visible to both
# functions?

import sys
import os
import re
import tempfile
import shutil
import inspect

class ShaderCompiler:
  # define some global variables defined in all shaders
  __globalCppVariables__ = '''
gContext = &context;
const Point &P = dg.getPoint();
const Normal &N = dg.getNormal();
const Vector &T = dg.getTangent();
const Vector &B = dg.getBinormal();
const ParametricCoordinates &UV = dg.getParametricCoordinates();
const Vector &dpdu = dg.getDPDU();
const Vector &dpdv = dg.getDPDV();
      float area = dg.getSurfaceArea();
      float invArea = dg.getInverseSurfaceArea();
  '''

  # define some global variables defined in all scattering shaders
  __globalScatteringCppVariables__ = __globalCppVariables__ + 'ScatteringDistributionFunction *F = 0;'

  # define some global variables defined in all emission shaders
  __globalEmissionCppVariables__ = __globalCppVariables__ + 'ScatteringDistributionFunction *E = 0;'

  # define some global variables defined in all sensor shaders
  __globalSensingCppVariables__ = __globalCppVariables__ + 'ScatteringDistributionFunction *S = 0;'
    
  def parseDeclaration(self, decl):
    # strip leading and ending whitespace
    decl = decl.lstrip()
    decl = decl.rstrip()
    try:
      # split decl into "type expression"
      (type, whitespace, expression) = decl.partition(' ')
      identifier = ""
      # set default values to 0 for now
      default = "0.0f"
      # Textures must default to a non-float
      if(type == "Texture"):
        default = "0"
      try:
        # split barexpr into "identifier [= default]"
        (identifier, default) = tuple(expression.split("="))
      except:
        # assume we only encountered an identifier
        identifier = expression
      # strip leading and ending whitespace
      type = type.lstrip()
      type = type.rstrip()
      identifier = identifier.lstrip()
      identifier = identifier.rstrip()
      default = default.lstrip()
      default = default.rstrip()

      # set the result
      result = (type, identifier, default)
    except:
      raise ValueError, 'Error: Expected a declaration.'
    return result
  
  def parseParameters(self, parameters):
    result = []
    # first check for void parameters
    voidParameters = re.compile('^\s*$|^\s*void\s*$')
    if voidParameters.search(parameters) != None:
      return result
    i = 0
    while i < len(parameters):
      # slurp characters until we find a ','
      # at our current depth
      decl = ''
      depth = 0
      while i < len(parameters):
        c = parameters[i]
        i += 1
        if c == '(':
          depth += 1
        elif c == ')':
          depth -= 1
        if c == ',' and depth == 0:
          break
        decl += c
      result.append(self.parseDeclaration(decl))
    return result
  
  def parseFunction(self, name, source):
    # split the source at the function name
    (stuffBeforeFunctionName, funcName, stuffAfterFunctionName) = source.partition(name)
    if funcName != name:
      return ([], '')
  
    # split the stuff after the function name into (parameters) and then body
    try:
      (params, openBrace, searchMeForBody) = stuffAfterFunctionName.partition('{')
    except:
      raise ValueError, "Error: expected '{' after function '%s' declaration." % name
  
    # split the parameters into '(' parametersList ')'
    (stuffBeforeOpenParens, firstOpenParens, stuffAfterOpenParens) = params.partition('(')
    (parameters, lastCloseParens, stuffAfterFinalCloseParens) = stuffAfterOpenParens.rpartition(')')
  
    # parse the parameters string into a list of parameters
    parametersList = self.parseParameters(parameters)
  
    # strip off the leading whitespace of the function body
    searchMeForBody = searchMeForBody.lstrip()
    depth = 1
    body = ''
    for c in searchMeForBody:
      if c == '{':
        depth += 1
      elif c == '}': depth -= 1
      if depth == 0:
        break
      body += c
    if depth != 0:
      raise ValueError, "Error: EOF reached before end of function '%s'." % name
    return (parametersList, body)
  
  def makeShaderParameterCode(self, parameterType, parameterName):
    # declare the parameter
    result = '%s %s;\n' % (parameterType, parameterName)
    # make a setter method for it
    if parameterType == "Vector" or parameterType == "Point" or parameterType == "Spectrum":
      result += 'void set_%s(const float x, const float y, const float z){%s = %s(x,y,z);}\n' % (parameterName, parameterName, parameterType)
    elif parameterType == "float":
      result += 'void set_%s(const %s &v){%s = v;}\n' % (parameterName, parameterType, parameterName)
    elif parameterType == "Texture":
      # set a TextureParameter with a handle or filename
      result += 'void set_%s(const TextureHandle &h){%s = h;}\n' % (parameterName, parameterName)
      result += 'void set_%s(const std::string &textureAlias){%s = textureAlias;}\n' %(parameterName, parameterName)
    else:
      print "Error: Unknown type %s for parameter %s." % (parameterType, parameterName)
      exit()
    return result
  
  def makeNullConstructorCode(self, className, parameterList):
    result = ''
    result += className + '(void)\n'
    if len(parameterList) > 0:
      result += ':\n'
      for param in parameterList[0:-1]:
        result += param[1] + '(' + param[2] + '),\n'
      result += parameterList[-1][1] + '(' + parameterList[-1][2] + ')\n'
    # empty body
    result += '{;}\n'
    return result
  
  def stripComments(self, shaderLines):
    stripped = ''
    for line in shaderLines:
      # begin a new line
      stripped += '\n'
      for i in range(0, len(line)):
        c = line[i]
        nextC = ''
        if i+1 != len(line):
          nextC = line[i+1]
        # leave '#' for preprocessor directives
        # only count '//' as comments
        if c == '/' and nextC == '/':
          break
        lastC = c
        stripped += c
    return stripped

  def createShaderCppCode(self, name, globals, body, returnName, parametersList, type):
    result = '''
virtual ScatteringDistributionFunction *evaluate%s(ShadingInterface &context, const DifferentialGeometry &dg) const
{
  // globals follow
  %s
  // body follows
  %s
  // return follows
  return %s;
}
virtual bool is%s(void) const {return true;}
'''
    result = result % (name, globals, body, returnName, type)
    return result

  def createCppIncludeCode(self, scatteringParametersList, emissionParametersList, sensorParametersList):
    return '''
#include "Material.h"
// XXX this should really go elsewhere
// hide TextureHandle/TextureParameter from the user
#include "TextureHandle.h"
typedef TextureParameter Texture;
#include "stdshader.h"
'''

  def createCppClassParentName(self):
    return 'Material'

  def createCppCode(self, shaderString, baseName):
    # add 'Shader' to the end of the basename to make it unique
    # from any of our c++ identifiers
    className = baseName + 'Shader'

    # try to parse 'scattering'
    scatteringString = ''
    scatteringParametersList = []
  
    (scatteringParametersList, scatteringBody) = self.parseFunction('scattering', shaderString)
    if scatteringBody != '':
      scatteringString = self.createShaderCppCode('Scattering',
                                                  self.__globalScatteringCppVariables__,
                                                  scatteringBody,
                                                  'F',
                                                  scatteringParametersList,
                                                  'Scatterer')
    
    # try to parse 'emission'
    emissionString = ''
    emissionParametersList = []
  
    (emissionParametersList, emissionBody) = self.parseFunction('emission', shaderString)
    if emissionBody != '':
      emissionString = self.createShaderCppCode('Emission',
                                                self.__globalEmissionCppVariables__,
                                                emissionBody,
                                                'E',
                                                emissionParametersList,
                                                'Emitter')
    
    # try to parse 'sensor'
    sensorString = ''
    sensorParametersList = []
  
    (sensorParametersList, sensorBody) = self.parseFunction('sensor', shaderString)
    if sensorBody != '':
      sensorString = self.createShaderCppCode('Sensor',
                                              self.__globalSensingCppVariables__,
                                              sensorBody,
                                              'S',
                                              sensorParametersList,
                                              'Sensor')
    
    # XXX we need to put the preamble outside of the class definition
    
    # standard includes
    compileMe = '''
class ShadingInterface;
ShadingInterface *gContext;
'''

    # add c++ #includes
    compileMe += self.createCppIncludeCode(scatteringParametersList,
                                           emissionParametersList,
                                           sensorParametersList)
    
    # XXX put the preamble just before the class definition
    #compileMe += preamble

    parentName = self.createCppClassParentName()
    
    compileMe += 'class %s : public %s\n' % (className, parentName)
    compileMe += '{\n'
    compileMe += 'public:\n'
    compileMe += 'virtual const char *getName(void) const{ return "%s";}\n' % baseName
    compileMe += scatteringString
    compileMe += emissionString
    compileMe += sensorString
    # add parameters
    for param in scatteringParametersList:
      compileMe += self.makeShaderParameterCode(param[0], param[1])
    for param in emissionParametersList:
      compileMe += self.makeShaderParameterCode(param[0], param[1])
    for param in sensorParametersList:
      compileMe += self.makeShaderParameterCode(param[0], param[1])
    # create null constructor
    compileMe += self.makeNullConstructorCode(className, scatteringParametersList + emissionParametersList + sensorParametersList)
    compileMe += '};\n'
    
    # create shared library export
    compileMe += 'extern "C" Material * createMaterial(void)\n'
    compileMe += '{\n'
    compileMe += '  return new %s();\n' % className
    compileMe += '}\n'

    # create thunks to methods for setting TextureParameters
    for param in scatteringParametersList + emissionParametersList + sensorParametersList:
      if param[0] == 'Texture':
        compileMe += 'void (%s::*set_%s_handle)(const TextureHandle &) = &%s::set_%s;\n' % (className, param[1], className, param[1])
        compileMe += 'void (%s::*set_%s_alias)(const std::string &) = &%s::set_%s;\n' % (className, param[1], className, param[1])
    
    compileMe += '''
  #include <boost/python.hpp>
  #include <boost/python/manage_new_object.hpp>
  #include <boost/python/return_value_policy.hpp>
  using namespace boost::python;
  BOOST_PYTHON_MODULE(%s)
  {
    def("createMaterial", createMaterial, return_value_policy<manage_new_object>());
    class_<TextureParameter>("TextureParameter")
      .def_readwrite("mHandle", &TextureParameter::mHandle)
      .def_readwrite("mAlias", &TextureParameter::mAlias)
      ;

    class_<%s, bases<Material> >("%s")
    ''' % (baseName,className,className)
    for param in scatteringParametersList:
      if param[0] == 'Texture':
        compileMe += '    .def("set_%s", set_%s_handle)\n' % (param[1], param[1])
        compileMe += '    .def("set_%s", set_%s_alias)\n' % (param[1], param[1])
      else:
        compileMe += '    .def("set_%s", &%s::set_%s)\n' % (param[1], className, param[1])
    for param in emissionParametersList:
      if param[0] == 'Texture':
        compileMe += '    .def("set_%s", set_%s_handle)\n' % (param[1], param[1])
        compileMe += '    .def("set_%s", set_%s_alias)\n' % (param[1], param[1])
      else:
        compileMe += '    .def("set_%s", &%s::set_%s)\n' % (param[1], className, param[1])
    for param in sensorParametersList:
      if param[0] == 'Texture':
        compileMe += '    .def("set_%s", set_%s_handle)\n' % (param[1], param[1])
        compileMe += '    .def("set_%s", set_%s_alias)\n' % (param[1], param[1])
      else:
        compileMe += '    .def("set_%s", &%s::set_%s)\n' % (param[1], className, param[1])

    for param in scatteringParametersList + emissionParametersList + sensorParametersList:
      compileMe += '    .def_readwrite("%s", &%s::%s)\n' % (param[1], className, param[1])

    compileMe += '    ;\n'

    # close the module
    compileMe += '}\n'

    return compileMe

  def createMakefileString(self, sources, baseName):
    # XXX fix this include ugliness
    #     ideally, there's a canonical installation of gotham somewhere
    #     with an include directory. point to that.
    makefile = '''
import os
includes = [os.environ['GOTHAMHOME'] + '/include']
if os.name == 'posix':
  includes += ['/usr/include/python2.5']
elif os.name == 'nt':
  includes += ['c:/Python25/include']
libpath = os.environ["GOTHAMHOME"] + '/lib'
if os.name == 'posix':
  libs = [File(libpath + '/libgotham.so'), 'boost_python']
elif os.name == 'nt':
  # on windows, we need to link to the import library
  libs = ['gotham']
# XXX TODO fix these path issues
if os.name == 'nt':
  libpath += ['c:/dev/lib', 'c:/Python25/libs']
env = None
if os.name == 'posix':
  env = Environment(CPPPATH = includes,
                    CPPFLAGS = '-O3',
                    LIBS = libs,
                    LIBPATH = libpath,
                    SHLIBPREFIX = '',
                    # we should automatically pick between icc and whatever is the default
                    #tools = ['default', 'intelc'])
                    tools = ['default'])
elif os.name == 'nt':
  env = Environment(CPPPATH = includes,
                    CPPFLAGS = ['/Ox', '/EHsc', '/MD', '/DIMPORTDLL=1'],
                    LIBS = libs,
                    LIBPATH = libpath,
                    SHLIBPREFIX = '',
                    SHLIBSUFFIX = '.pyd',
                    WINDOWS_INSERT_MANIFEST = True)
'''

    makefile += 'sources = ' + `sources`

    makefile += '''
result = env.SharedLibrary('%s', sources)
if os.name == 'nt':
  # we must explicitly embed the "manifest" after building the dll
  # from http://www.scons.org/wiki/EmbedManifestIntoTarget 
  env.AddPostAction(result, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
  # delete the manifest file
  env.AddPostAction(result, 'del.exe ${TARGET}.manifest')
  # delete the import library - we don't need it
  env.AddPostAction(result, 'del.exe ${TARGET.filebase}.lib')
  # delete the .exp library
  env.AddPostAction(result, 'del.exe ${TARGET.filebase}.exp')
''' % baseName

    return makefile

  def createSourceFiles(self, shaderString, baseName, dir):
    # create the c++ code
    compileMe = self.createCppCode(shaderString, baseName)
    
    #print compileMe
    
    cpppath = dir + '/' + baseName + '.cpp'
  
    # replace all \ with /
    # XXX for some reason scons messes up if we don't do this
    #     \ in the dir are interpreted as escape characters
    cpppath = cpppath.replace('\\', '/')
  
    cppfile = open(cpppath, 'w')
    cppfile.write(compileMe)
    cppfile.close()

    return [cpppath]
  
  def compile(self, filename):
    # open the file
    baseName = os.path.basename(filename)
    baseName = baseName.split('.')[0]
  
    infile = open(filename)
    
    # strip out '//' and '#' comments
    # XXX this will disallow us from using '#include' in a shader
    shaderString = self.stripComments(infile.readlines())

    # create a temporary directory to hold source files
    dir = tempfile.mkdtemp()

    # create the source files
    sources = self.createSourceFiles(shaderString, baseName, dir)

    # draft the makefile
    makefile = self.createMakefileString(sources, baseName)
    
    # write it to disk
    sconstruct = open(dir + '/' + 'SConstruct', 'w')
    sconstruct.write(makefile)
    sconstruct.close()
    
    # call scons
    # XXX cygwin has a fit if you call it scons when its name is scons.bat
    #     fix this nonsense
    pathToScons = ''
    if os.name == 'posix':
      pathToScons = 'scons'
      command = 'scons -Q -f %s' % dir + '/' + 'SConstruct' 
    elif os.name == 'nt':
      pathToScons = 'c:/Python25/scons.bat'
      command = 'c:/Python25/scons.bat -Q -f %s' % dir + '/' + 'SConstruct' 
    os.system(command)
    #os.execl(pathToScons, '-Q', '-f', dir + '/SConstruct')
    
    # kill the tempfiles
    #shutil.rmtree(dir, True)
  
def usage():
  pass

# run the compiler if this file was invoked
# as an executable
if sys.argv[0] == inspect.getsourcefile(usage):
  if len(sys.argv) < 2:
    print 'Error: No input file specified.'
    usage()
    exit()
  
  # create a compiler
  compiler = ShaderCompiler()
  for file in sys.argv[1:]:
    compiler.compile(file)

