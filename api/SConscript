import os

Import('env')

# add dependencies
# with msvc, boost figures out which libraries to link
if os.name == 'posix':
  env.Append(LIBS = ['boost_python'])
  env.Append(LIBS = ['boost_thread'])

env.Append(LIBS = ['records'])
env.Append(LIBS = ['renderers'])
env.Append(LIBS = ['rasterizables'])
env.Append(LIBS = ['importance'])
env.Append(LIBS = ['mutators'])
env.Append(LIBS = ['path'])
env.Append(LIBS = ['primitives'])
env.Append(LIBS = ['surfaces'])
env.Append(LIBS = ['shading'])
env.Append(LIBS = ['geometry'])

# cuda Gotham libraries
env.Append(LIBS = ['cudaprimitives'])
env.Append(LIBS = ['cudashading'])
env.Append(LIBS = ['cudarenderers'])
env.Append(LIBS = ['cudanumeric'])
env.Append(LIBS = ['stdcuda'])

# openexr libraries
env.Append(LIBS = ['Iex'])
env.Append(LIBS = ['IlmImf'])
env.Append(LIBS = ['Imath'])
env.Append(LIBS = ['Half'])
env.Append(LIBS = ['z'])

# cuda libraries
env.Append(LIBS = ['cudart'])
env.Append(LIBPATH = ['/usr/local/cuda/lib'])

# with msvc, boost figures out which libraries to link
if os.name == 'posix':
  env.Append(LIBS = ['boost_python'])
  env.Append(LIBS = ['boost_thread'])

# qt libraries
env.Append(LIBS = ['QtCore'])
env.Append(LIBS = ['QtXml'])
env.Append(LIBS = ['QtGui'])
env.Append(LIBS = ['QtOpenGL'])

# gl libraries
env.Append(LIBS = ['GL'])
env.Append(LIBS = ['GLU'])
env.Append(LIBS = ['GLEW'])
env.Append(LIBS = ['QGLViewer'])

# Gotham library paths
env.Append(LIBPATH = ['../geometry',
                      '../importance',
                      '../path',
                      '../mutators',
                      '../primitives',
                      '../rasterizables',
                      '../records',
                      '../records',
                      '../renderers',
                      '../shading',
                      '../surfaces'])

# CUDA Gotham library paths
env.Append(LIBPATH = ['../cuda/primitives',
                      '../cuda/shading',
                      '../cuda/renderers',
                      '../cuda/numeric',
                      '../../stdcuda'])

# create a shared library
gothamLib = env.SharedLibrary('gotham', ['exportApi.cpp', 'Gotham.cpp'])

# install the distribution
try:
  dir = os.environ["GOTHAMHOME"] + '/lib'
  Default(env.Install(dir, source = gothamLib))
  Default(env.Install(dir, source = 'api.py'))
  Default(env.Install(dir, source = 'objtogoth.py'))
  Default(env.Install(dir, source = 'wavefront.py'))
  Default(env.Install(dir, source = 'pygtogoth/pygtogoth.py'))
  Default(env.Install(dir, source = 'pygtogoth/pygpatch.py'))
  Default(env.Install(dir, source = 'pygtogoth/pygshaders.py'))
  dir = os.environ["GOTHAMHOME"] + '/bin'
  Default(env.Install(dir, source = 'pbslc'))
  Default(env.Install(dir, source = 'gotham'))
except:
  print "Warning: $GOTHAMHOME not defined! Gotham could not be installed."

# if we are writing test code, build it
if os.path.isfile("test.cpp"):
  env.Append(LIBS = ['python2.5'])
  env.Program('test', 'test.cpp')
  dir = os.environ["GOTHAMHOME"] + '/bin'
  Default(env.Install(dir, source = 'test'))

# build imgstat
if os.path.isfile("imgstat.cpp"):
  env.Append(LIBS = ['python2.5'])
  env.Program('imgstat', 'imgstat.cpp')
  dir = os.environ["GOTHAMHOME"] + '/bin'
  Default(env.Install(dir, source = 'imgstat'))

# build imgclean
if os.path.isfile("imgclean.cpp"):
  env.Append(LIBS = ['python2.5'])
  env.Program('imgclean', 'imgclean.cpp')
  dir = os.environ["GOTHAMHOME"] + '/bin'
  Default(env.Install(dir, source = 'imgclean'))

