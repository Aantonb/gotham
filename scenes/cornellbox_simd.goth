#!/usr/bin/env python
#!/usr/bin/env gotham

from api import *

unitSquare = ([-0.5, 0,  0.5,
                0.5, 0,  0.5,
                0.5, 0, -0.5,
               -0.5, 0, -0.5],
              [   
                  0, 1,  3,
                  1, 2,  3
              ])

Material('matte', 'Kd', (0.8, 0.8, 0.8))
PushMatrix()
Translate(0, 0, -1)
Rotate(90, 1, 0, 0)
Scale(2.0,2.0,2.0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()


# floor
Material('matte', 'Kd', (0.8, 0.8, 0.8))
PushMatrix()
Translate(0,-1,0)
Scale(2.0, 2.0, 2.0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# ceiling
Material('matte', 'Kd', (0.8, 0.8, 0.8))
PushMatrix()
Translate(0,1,0)
Scale(2.0, 2.0, 2.0)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# left wall
Material('matte', 'Kd', (0.8, 0.2, 0.2))
PushMatrix()
Translate(-1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(-90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# right wall
Material('matte', 'Kd', (0.2, 0.8, 0.2))
PushMatrix()
Translate(1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()


# light
Material('light', 'power', (20,20,20))
PushMatrix()
Translate(0, 0.95, 0)
Scale(0.5, 0.5, 0.5)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# mirror ball
Material('mirror', 'Kr', (1.0, 1.0, 1.0))
Sphere(-0.4, -0.66, -0.15, 0.33)

# glass ball
Material('perfectglass', 'Kr', (1.0, 1.0, 1.0), 'Kt', (1.0, 1.0, 1.0), 'eta', 1.5)
Sphere(0.4,-0.66,0.25,0.33)

Attribute("renderer:algorithm", "debug")
Attribute("renderer:threads", "16")

# let's render to a 512x512 image
(w,h) = (512,512)
Attribute("record:width",  w)
Attribute("record:height", h)

PushMatrix()
LookAt( (0,0,3.0), (0,0,-1), (0,1,0) )
Camera(float(w) / h, 60.0, 0.01)
PopMatrix()

#PushMatrix()
#LookAt([-0.0027008,0.326968,1.09286],
#        [-0.0690239,-0.338381,0.349279],
#        [-0.0335963,0.746287,-0.664776])
#Camera(1,60.0, 0.01)
#PopMatrix()


# finally, tell gotham to render
Render()


