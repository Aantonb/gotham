#!/usr/bin/env gotham

from api import *

import objtogoth

unitSquare = ([-0.5, 0,  0.5,
                0.5, 0,  0.5,
                0.5, 0, -0.5,
               -0.5, 0, -0.5],
              [0, 0,
               1, 0,
               1, 1,
               0, 1],
              [   
                  0, 1,  3,
                  1, 2,  3
              ])

Material('dpdu')
PushMatrix()
Translate(0, 0, -1)
Rotate(90, 1, 0, 0)
Scale(2.0,2.0,2.0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# floor
PushMatrix()
Translate(0,-1,0)
Scale(2.0, 2.0, 2.0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# ceiling
PushMatrix()
Translate(0,1,0)
Scale(2.0, 2.0, 2.0)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# left wall
PushMatrix()
Translate(-1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(-90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# right wall
PushMatrix()
Translate(1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

(verts, parms, indices, normals) = objtogoth.objtogoth("../../../../../data/geometry/obj/bunny.obj")
PushAttributes()
PushMatrix()
Translate(0,-1.2,0)
Scale(5,5,5)
Mesh(verts, parms, indices)
PopMatrix()
PopAttributes()

# light
Material('light', 'power', (20,20,20))
PushMatrix()
Translate(0, 0.95, 0)
Scale(0.5, 0.5, 0.5)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()


# let's render to a 512x512 image
(w,h) = (512,512)
Attribute("record:width",  w)
Attribute("record:height", h)
Attribute("renderer:threads", w*h)

PushMatrix()
LookAt( (0,0,3.0), (0,0,-1), (0,1,0) )
Camera(float(w) / h, 60.0, 0.01)
PopMatrix()

Attribute('viewer', False)
Attribute('renderer:algorithm', 'debug')

# render on cpu
Attribute("record:outfile", "testdpdu.cpu.exr")
Render();

# now use the cuda subsystem
Attribute("renderer:subsystem", 'CudaGotham')
Attribute("record:outfile", "testdpdu.gpu.exr")
Render()

