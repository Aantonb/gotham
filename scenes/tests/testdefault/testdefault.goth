#!/usr/bin/env gotham

from api import *

import objtogoth

unitSquare = ([-0.5, 0,  0.5,
                0.5, 0,  0.5,
                0.5, 0, -0.5,
               -0.5, 0, -0.5],
              [   0, 0,
                  1, 0,
                  1, 1,
                  0, 1],
              [   
                  0, 1,  3,
                  1, 2,  3
              ])

PushMatrix()
Translate(0, 0, -1)
Rotate(90, 1, 0, 0)
Scale(2.0,2.0,2.0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# floor
PushMatrix()
Translate(0,-1,0)
Scale(2.0, 2.0, 2.0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# ceiling
PushMatrix()
Translate(0,1,0)
Scale(2.0, 2.0, 2.0)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# left wall
PushMatrix()
Translate(-1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(-90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# right wall
PushMatrix()
Translate(1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# light
Material('light', 'power', (20,20,20))
PushMatrix()
Translate(0, 0.95, 0)
Scale(0.5, 0.5, 0.5)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1], unitSquare[2])
PopMatrix()

# let's render to a 512x512 image
(w,h) = (512,512)
Attribute("record:width",  w)
Attribute("record:height", h)
Attribute("renderer:threads", w*h)
Attribute("renderer:spp", (4,4))

PushMatrix()
LookAt( (0,0,3.0), (0,0,-1), (0,1,0) )
Camera(float(w) / h, 60.0, 0.01)
PopMatrix()

Attribute('viewer', False)

# render on cpu
Attribute('record:outfile', 'testdefault.cpu.exr')
Render()

# use the cuda subsystem
Attribute("renderer:subsystem", 'CudaGotham')
Attribute('record:outfile', 'testdefault.gpu.exr')
Render()

