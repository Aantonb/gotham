# from http://www.qandr.org/quentin/writings/debscons.html
import os, shutil, sys, glob
Import('env') # exported by parent SConstruct

# I wanted to base the debian version number partly on the
# revision checked out from our SVN repository. 
# Skip this if it's not relevant to you.
svn_version = os.popen('svnversion ..').read()[:-1]
# This may be as simple as '89' or as complex as '4123:4184M'.
# We'll just use the last bit.
svn_version = svn_version.split(':')[-1]

DEBNAME = "gotham"
DEBVERSION = "0.01"
DEBMAINT = "Jared Hoberock [jaredhoberock@gmail.com]"
# XXX we should use uname or something to get the architecture
DEBARCH = "amd64"
DEBDEPENDS = "scons, g++, libboost-dev, libboost-date-time-dev, libboost-thread-dev, libboost-python-dev, libglew-dev, libopenexr-dev, libglut-dev"
DEBDESC = "An unbiased photorealistic renderer"

install_base = 'usr/local/gotham/'

DEBFILES = []

src_base = "../../"

directories_and_extensions = [('bin/', ['']),
                              ('lib/', ['.py', '.so']),
                              ('include/', ['.h']),
                              ('shaders/', ['.pbsl', '.so'])]

for dir in directories_and_extensions:
  for ext in dir[1]:
    pattern = os.path.join(os.getcwd() + '/' + src_base + dir[0], '*' + ext)
    for fullpath in glob.glob(pattern):
      basename = os.path.basename(fullpath)
      DEBFILES.append((install_base + dir[0] + basename,
                       '#' + src_base + dir[0] + basename))

# This is the debian package we're going to create
debpkg = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, svn_version, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias("debian", debpkg)

DEBCONTROLFILE = os.path.join(DEBNAME, "DEBIAN/control")

# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:

CONTROL_TEMPLATE = """
Package: %s
Priority: extra
Section: misc
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s-%s
Depends: %s
Description: %s

"""
env.Depends(debpkg,DEBCONTROLFILE )

# The control file should be updated when the SVN version changes
env.Depends(DEBCONTROLFILE, env.Value(svn_version))

# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, installed_size, DEBMAINT, DEBARCH, DEBVERSION,
        svn_version, DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()
    
# We can generate the control file by calling make_control
env.Command(DEBCONTROLFILE, None, make_control)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, DEBCONTROLFILE,
            "dpkg-deb -b %s %s" % ("%s" % DEBNAME, "$TARGET"))

